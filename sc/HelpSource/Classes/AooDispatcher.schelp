TITLE:: AooDispatcher
summary:: AOO message dispatcher
categories:: External Control>AOO
related:: Classes/AooClient, Classes/AooPeer, Classes/OSCFunc, Classes/OSCdef

DESCRIPTION::

AooDispatcher is a custom message dispatcher class which can be used with link::Classes/OSCFunc:: or link::Classes/OSCdef:: to handle OSC messages from peers.

There are a few important differences:

numberedlist::
## The code::recvPort:: argument to link::Classes/OSCFunc#*new:: resp. link::Classes/OSCdef#*new:: must be code::nil::!

(AooDispatcher matches AooClient objects, not port numbers.)

## The code::srcId:: argument is an link::Classes/AooPeer:: (instead of a link::Classes/NetAddr::).

## The third argument (code::addr::) of the message function is an link::Classes/AooPeer:: (instead of a link::Classes/NetAddr::).

## The forth argument (code::recvPort::) of the message function is the corresponding AooClient (instead of the port number)
::

Users are not supposed to create AooDispatcher objects themselves; instead they should use link::Classes/AooClient#-dispatcher:: or link::Classes/Aoo#*dispatcher::.

Example:
code::
~client = AooClient(9000);

// receive /test1 OSC message from all peers
OSCFunc({ |msg, time, peer|
	"received /test1 message from %".format(peer).postln;
}, '/test1', dispatcher: ~client.dispatcher);

// receive /test2 OSC message only from a specific peer
OSCFunc({ |msg, time, peer|
	"received /test2 message from %".format(peer).postln;
}, '/test2', AooPeer("test", "foo"), dispatcher: ~client.dispatcher);

// argument templates work as expected
OSCFunc({ |msg, time, peer|
	"received /test2 message from %".format(peer).postln;
}, '/test3', argTemplate: [1, 2], dispatcher: ~client.dispatcher);

// if you use the global dispatcher, the fourth argument of
// the message function will give you the AooClient object:
OSCFunc({ |msg, time, peer, client|
	"received /test2 message from %".format(peer).postln;
	// send reply
	client.sendMsg(peer, nil, ['/reply', "hello!"]);
}, '/test3', argTemplate: [1, 2], dispatcher: Aoo.dispatcher);
::
