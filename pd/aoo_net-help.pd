#N canvas 430 15 658 913 12;
#X declare -lib aoo;
#X obj 379 266 declare -lib aoo;
#X text 38 25 [aoo_server] / [aoo_client]: objects for UDP hole punching;
#N canvas 270 227 480 502 server 0;
#X floatatom 32 369 5 0 0 0 - - - 0;
#N canvas 71 488 756 237 events 0;
#X obj 37 37 inlet;
#X obj 37 62 print aoo_server;
#X msg 37 93 user_join <user> <id> <ip> <port>;
#X text 288 92 a new user connected to the server;
#X text 290 123 a user disconnected from the server;
#X msg 37 123 user_leave <user> <id> <ip> <port>;
#X text 290 156 a user joined a group;
#X text 292 189 a user left a group;
#X msg 37 156 group_join <group> <user> <id>;
#X msg 38 189 group_leave <group> <user> <id>;
#X connect 0 0 1 0;
#X restore 134 369 pd events;
#X text 32 400 outlets:;
#X text 45 422 1) number of connected users;
#X text 45 442 2) events;
#X text 25 29 [aoo_server]: the UDP punch hole server;
#X text 28 56 creation arguments:;
#X text 45 78 1) port number;
#X text 28 144 NOTE: If you want to connect clients over the public internet \, your server machine must be publicly accessible and the given port number must be known by all clients.;
#X text 28 107 Use this object to host an AOO server for a local network or the public internet., f 58;
#X text 29 198 Each user is identified by its name or unique ID. A single user can join multiple groups., f 49;
#X msg 32 254 port 8003;
#X text 112 254 set listening port;
#X msg 45 306 relay \$1;
#X obj 45 280 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 117 282 enable/disable server relay;
#X text 115 306 (disabled by default);
#X obj 32 344 aoo_server 8002;
#X connect 11 0 17 0;
#X connect 13 0 17 0;
#X connect 14 0 13 0;
#X connect 17 0 0 0;
#X connect 17 1 1 0;
#X restore 129 267 pd server;
#N canvas 1080 95 750 739 client 0;
#X text 24 21 [aoo_client]: the client;
#X text 26 131 creation arguments:;
#X text 50 151 1) port number, f 15;
#X obj 25 596 aoo_client;
#X msg 35 240 disconnect;
#X text 127 596 outlets:;
#X msg 47 466 group_leave <group>;
#X text 125 241 Disconnect from the server.;
#X text 138 621 1) connection status (1|0);
#X text 138 645 2) events/replies;
#X text 61 375 You will get a [peer_join( message for every existing peer in the group (see "events")., f 88;
#X msg 58 513 peer_list;
#X text 24 103 A peer is defined by its group name \, user name \, user ID \, IP address and port number., f 90;
#X text 196 466 Leave a group.;
#X text 25 52 Clients connect to the server and join a group to obtain the (public) IP addresses of their peers. This enables peers to send each other messages over the interent which usually isn't possible because of NAT. For more info see https://en.wikipedia.org/wiki/UDP_hole_punching., f 93;
#X text 62 396 NOTE: it's possible to join several groups simultanously!, f 58;
#X msg 25 201 connect <hostname> <port>, f 26;
#X text 325 283 Join a group as a user.;
#X text 234 196 Connect to the AOO server with the given hostname/IP address and port number. Outputs 1 on success or 0 on failure., f 61;
#X msg 44 276 group_join <group_name> <group_pwd> <user_name> [<user_pwd>], f 37;
#X text 59 319 The group password is shared by all users. If you don't care about security \, just use the group name itself or a simple symbol like '_'., f 77;
#X text 60 354 The user name must be unique within the group. The user password is optional., f 77;
#X text 60 424 Outputs;
#X msg 124 422 group_join <1|0>;
#X text 303 466 Outputs;
#X msg 367 464 group_leave <1|0>;
#X text 498 464 on success/fail.;
#X text 248 424 on success/fail.;
#X text 58 564 Send messages to peers:;
#N canvas 694 47 1139 916 messages 0;
#X msg 47 82 disconnect;
#X obj 707 368 oscformat bazoo;
#X msg 707 342 1 2 3;
#X text 327 154 send to all peers in a given group, f 35;
#X text 378 184 send to a single peer;
#X msg 116 382 target;
#X msg 110 351 target <group>;
#X msg 99 319 target <group> <user>;
#X text 258 253 send an OSC message to the current target (more efficient than the methods above), f 43;
#X text 260 290 "send" selector is optional;
#X text 263 320 target a single peer;
#X text 221 354 target a group;
#X text 171 382 broadcast (= default);
#X msg 132 544 offset <f>;
#X obj 58 860 print A;
#X msg 719 451 target test2 C;
#X msg 725 477 target;
#X msg 730 531 offset \$1;
#X msg 141 631 schedule \$1;
#X obj 141 605 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 239 631 0: don't schedule \, instead output the required delay., f 54;
#X obj 27 805 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 677 586 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 896 589 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 27 778 aoo_client 9992;
#X obj 677 560 aoo_client 9993;
#X obj 896 563 aoo_client 9994;
#X msg 142 691 discard_late \$1;
#X obj 142 666 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 266 667 Discard late bundles. This is only relevant for automatic scheduling. With manual scheduling \, users can simply filter messages with a negative delay., f 58;
#X msg 714 424 target test2 A;
#X obj 922 373 oscformat bazoo;
#X msg 922 348 1 2 3;
#X msg 940 480 target;
#X msg 945 535 offset \$1;
#X msg 929 427 target test2 A;
#X msg 934 454 target test2 B;
#X msg 135 576 offset -1;
#X msg 784 505 -1;
#X msg 999 508 -1;
#X text 155 777 Incoming messages are sent to the second outlet as, f 51;
#X msg 55 125 broadcast <bytes...>;
#X msg 62 153 send_group <group> <type> <bytes...>;
#X msg 70 185 send_peer <group> <user> <type> <bytes...>;
#X msg 78 215 send_peer <IP> <port> <type> <bytes...>;
#X msg 85 258 send <type> <bytes...>;
#X msg 92 289 list <type> <bytes...>;
#X obj 58 806 route msg;
#X obj 154 834 route osc;
#X obj 154 862 oscparse;
#X obj 707 392 list prepend osc;
#X floatatom 730 505 6 0 0 0 - - - 0;
#X floatatom 945 509 6 0 0 0 - - - 0;
#X obj 922 397 list prepend osc;
#X text 592 33 possible values for <type>:;
#X text 588 66 "raw": raw bytes;
#X text 589 86 "osc": OSC message;
#X text 590 107 "fudi": FUDI message;
#X text 591 129 "midi": MIDI message;
#X text 591 151 "text": plain text;
#X text 591 173 "json": JSON text;
#X text 594 198 "xml": XML text;
#X msg 37 52 group_join test2 _ A;
#X msg 28 24 connect localhost 8002;
#X msg 696 313 disconnect;
#X msg 677 255 connect localhost 8002;
#X msg 686 283 group_join test2 _ B;
#X msg 915 315 disconnect;
#X msg 896 257 connect localhost 8002;
#X msg 905 285 group_join test2 _ C;
#X text 211 126 send a message to all peers;
#X text 218 540 Set the time offset in ms. Use this for scheduling messages in the future to preserve relative timing.;
#X text 220 579 No offset = send immediately. This is the default., f 53;
#X text 238 608 1: automatically schedule incoming messages.;
#X msg 121 438 reliable \$1;
#X obj 121 412 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 216 408 enable/disable reliable messaging.;
#X text 218 431 By default \, messages are unreliable \, i.e. they might get lost due to packet loss or be receiveed out of order.;
#X text 129 464 If "reliable" is turned on \, messages are guaranteed to arrive (in order). However \, this may cause unpredictable latencies and head-of-line blocking \, the client may need to wait for messages to be resent by the peer., f 75;
#X text 130 514 In practice \, you can mix both depending on the use case., f 57;
#X msg 516 777 msg <delay> <group> <user> <type> <data...>;
#X obj 58 834 list split 3;
#X obj 154 806 list trim;
#X obj 926 593 route msg;
#X obj 1022 621 route osc;
#X obj 1022 647 oscparse;
#X obj 926 621 list split 3;
#X obj 1022 594 list trim;
#X obj 710 592 route msg;
#X obj 806 620 route osc;
#X obj 806 646 oscparse;
#X obj 710 620 list split 3;
#X obj 806 593 list trim;
#X obj 710 646 print B;
#X obj 926 647 print C;
#X msg 141 747 delay \$1;
#X floatatom 141 721 6 0 0 0 - - - 0;
#X text 219 721 Extra delay in ms (positive or negative!) for automatically scheduled messages. This may be used if messages are always late \, or scheduled too far into the future., f 70;
#X text 248 804 <delay> is the difference in ms between the message timestamp and our current system time. If the delay is negative \, it means the message is late \, i.e. the timestamp has expired before arrival., f 78;
#X text 251 853 NB: the (original) delay is kept for automatically scheduled messages \, so you may correct the timing with the "delay" message., f 78;
#X connect 0 0 24 0;
#X connect 1 0 50 0;
#X connect 2 0 1 0;
#X connect 5 0 24 0;
#X connect 6 0 24 0;
#X connect 7 0 24 0;
#X connect 13 0 24 0;
#X connect 15 0 25 0;
#X connect 16 0 25 0;
#X connect 17 0 25 0;
#X connect 18 0 24 0;
#X connect 19 0 18 0;
#X connect 24 0 21 0;
#X connect 24 1 47 0;
#X connect 25 0 22 0;
#X connect 25 1 88 0;
#X connect 26 0 23 0;
#X connect 26 1 83 0;
#X connect 27 0 24 0;
#X connect 28 0 27 0;
#X connect 30 0 25 0;
#X connect 31 0 53 0;
#X connect 32 0 31 0;
#X connect 33 0 26 0;
#X connect 34 0 26 0;
#X connect 35 0 26 0;
#X connect 36 0 26 0;
#X connect 37 0 24 0;
#X connect 38 0 17 0;
#X connect 39 0 34 0;
#X connect 41 0 24 0;
#X connect 42 0 24 0;
#X connect 43 0 24 0;
#X connect 44 0 24 0;
#X connect 45 0 24 0;
#X connect 46 0 24 0;
#X connect 47 0 81 0;
#X connect 47 1 14 0;
#X connect 48 0 49 0;
#X connect 49 0 14 0;
#X connect 50 0 25 0;
#X connect 51 0 17 0;
#X connect 52 0 34 0;
#X connect 53 0 26 0;
#X connect 62 0 24 0;
#X connect 63 0 24 0;
#X connect 64 0 25 0;
#X connect 65 0 25 0;
#X connect 66 0 25 0;
#X connect 67 0 26 0;
#X connect 68 0 26 0;
#X connect 69 0 26 0;
#X connect 74 0 24 0;
#X connect 75 0 74 0;
#X connect 81 0 14 0;
#X connect 81 1 82 0;
#X connect 82 0 48 0;
#X connect 83 0 86 0;
#X connect 83 1 94 0;
#X connect 84 0 85 0;
#X connect 85 0 94 0;
#X connect 86 0 94 0;
#X connect 86 1 87 0;
#X connect 87 0 84 0;
#X connect 88 0 91 0;
#X connect 88 1 93 0;
#X connect 89 0 90 0;
#X connect 90 0 93 0;
#X connect 91 0 93 0;
#X connect 91 1 92 0;
#X connect 92 0 89 0;
#X connect 95 0 24 0;
#X connect 96 0 95 0;
#X restore 229 564 pd messages;
#X msg 373 534 peer <group> <user> <id> <IP> <port>;
#X text 141 510 Get a list all a peers. This will output a series of [peer( messages:, f 70;
#N canvas 1076 331 692 393 events 0;
#X msg 32 170 peer_leave <group> <user> <id> <IP> <port>;
#X text 344 170 a peer has left the group;
#X msg 32 307 msg <type> <bytes...>;
#X text 197 307 message received from peer. See "pd messages".;
#X text 34 33 events:;
#X msg 32 135 peer_join <group> <user> <id> <IP> <port>;
#X text 343 137 a new peer has joined the group;
#X msg 33 63 peer_handshake <group> <user> <id> <IP> <port>;
#X text 377 61 begin handshake with new peer in group;
#X msg 32 95 peer_timeout <group> <user> <id> <IP> <port>;
#X text 366 92 handshake has timed out - could not establish connection with peer, f 37;
#X msg 32 220 peer_ping <group> <user> <id> <IP> <port> <delay>;
#X text 398 219 received ping from peer;
#X msg 32 250 peer_pong <group> <user> <id> <IP> <port> <delay1> <delay2> <rtt>, f 43;
#X text 350 257 received pong from peer;
#X restore 270 645 pd events;
#X connect 4 0 3 0;
#X connect 6 0 3 0;
#X connect 11 0 3 0;
#X connect 16 0 3 0;
#X connect 19 0 3 0;
#X restore 208 267 pd client;
#X text 43 266 More info:;
#X text 40 76 A client on a given port first connects to an AOO server. For the internet \, the server has to be publicly accessable. For local networks \, the server can be private \, i.e. run on a user's machine., f 76;
#X text 38 51 These objects allow peers to easily communicate with each other in a network., f 78;
#X text 41 168 A peer is referenced by its group and user name \, so that <group> <user> effectively replaces <host> <port> in all relevant methods and events., f 77;
#X text 41 208 All AOO objects on the same port share the same peer list.;
#X text 40 130 Once the client has joined a group \, it receives a list of all existing peers in that group and is notified whenever a peer joins/leaves the group., f 77;
#X text 41 234 You can always use the public AOO server of the IEM: vrr.iem.at 7077, f 70;
#X msg 67 426 disconnect;
#X msg 333 422 disconnect;
#X obj 317 622 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 45 740 add test bar 1;
#X msg 53 765 remove;
#X msg 329 766 uninvite;
#X msg 319 741 invite test foo 1;
#X msg 186 814 \; pd dsp \$1;
#X obj 186 789 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 60 792 start;
#X msg 107 792 stop;
#X obj 74 513 oscformat bazoo;
#X msg 74 486 1 2 3;
#X msg 341 512 1 2 3;
#X obj 341 541 oscformat hooray;
#X obj 47 586 aoo_client 9990;
#X obj 317 596 aoo_client 9991;
#X obj 74 461 bng 19 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X obj 341 458 bng 19 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X text 389 458 send a message to a single peer (test|foo), f 25;
#X obj 341 483 t b b;
#X msg 392 512 target test foo;
#X obj 45 850 print FOO;
#X obj 463 846 print BAR;
#X msg 60 393 group_join test _ foo _;
#X msg 317 344 connect localhost 8002;
#X text 98 460 send a message to all peers;
#X obj 74 541 list prepend osc;
#X obj 341 565 list prepend osc;
#X text 49 316 1) connect to (local) server;
#X text 60 368 2) join group "test" as user "foo";
#X text 314 318 1) connect to (local) server;
#X text 326 369 2) join group "test" as user "bar";
#X text 40 715 use group/user in AOO source and sink;
#X obj 47 611 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 48 343 connect localhost 8002;
#X msg 325 392 group_join test _ bar _;
#X obj 45 823 aoo_send~ 1 9990 1;
#X obj 319 822 aoo_receive~ 1 9991 1;
#X obj 83 616 route msg;
#X obj 179 644 route osc;
#X obj 179 670 oscparse;
#X obj 83 644 list split 3;
#X obj 179 617 list trim;
#X obj 83 670 print FOO;
#X obj 348 624 route msg;
#X obj 444 652 route osc;
#X obj 444 678 oscparse;
#X obj 348 652 list split 3;
#X obj 444 625 list trim;
#X obj 348 678 print FOO;
#X text 169 588 receive message;
#X text 438 594 receive message;
#X connect 11 0 26 0;
#X connect 12 0 27 0;
#X connect 14 0 48 0;
#X connect 15 0 48 0;
#X connect 16 0 49 0;
#X connect 17 0 49 0;
#X connect 19 0 18 0;
#X connect 20 0 48 0;
#X connect 21 0 48 0;
#X connect 22 0 38 0;
#X connect 23 0 22 0;
#X connect 24 0 25 0;
#X connect 25 0 39 0;
#X connect 26 0 45 0;
#X connect 26 1 50 0;
#X connect 27 0 13 0;
#X connect 27 1 56 0;
#X connect 28 0 23 0;
#X connect 29 0 31 0;
#X connect 31 0 24 0;
#X connect 31 1 32 0;
#X connect 32 0 27 0;
#X connect 35 0 26 0;
#X connect 36 0 27 0;
#X connect 38 0 26 0;
#X connect 39 0 27 0;
#X connect 46 0 26 0;
#X connect 47 0 27 0;
#X connect 48 0 33 0;
#X connect 49 1 34 0;
#X connect 50 0 53 0;
#X connect 50 1 55 0;
#X connect 51 0 52 0;
#X connect 52 0 55 0;
#X connect 53 0 55 0;
#X connect 53 1 54 0;
#X connect 54 0 51 0;
#X connect 56 0 59 0;
#X connect 56 1 61 0;
#X connect 57 0 58 0;
#X connect 58 0 61 0;
#X connect 59 0 61 0;
#X connect 59 1 60 0;
#X connect 60 0 57 0;
