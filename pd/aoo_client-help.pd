#N canvas 304 103 760 697 12;
#X declare -lib aoo;
#X obj 599 29 declare -lib aoo;
#X text 38 25 [aoo_client]: AOO client;
#X text 407 630 see also;
#X obj 476 630 aoo_server;
#X msg 57 221 disconnect;
#X msg 69 435 group_leave <group>;
#X text 147 222 Disconnect from the server.;
#X text 173 607 1) connection status (1|0);
#X text 173 631 2) events/replies;
#X text 83 346 You will get a [peer_join( message for every existing peer in the group (see "events")., f 88;
#X msg 80 475 peer_list;
#X text 218 435 Leave a group.;
#X text 84 367 NOTE: it's possible to join several groups simultanously!, f 58;
#X msg 47 162 connect <hostname> <port>, f 26;
#X text 506 257 Join a group as a user.;
#X text 256 157 Connect to the AOO server with the given hostname/IP address and port number. Outputs 1 on success or 0 on failure., f 61;
#X msg 66 257 group_join <group_name> <group_pwd> <user_name> [<user_pwd>];
#X text 81 290 The group password is shared by all users. If you don't care about security \, just use the group name itself or a simple symbol like '_'., f 78;
#X text 82 325 The user name must be unique within the group. The user password is optional., f 77;
#X text 82 395 Outputs;
#X text 325 435 Outputs;
#X msg 385 434 group_leave <1|0>;
#X text 516 434 on success/fail.;
#X text 80 550 Send messages to peers:;
#X msg 451 496 peer <group> <user> <id> <IP> <port>;
#X text 157 475 Get a list all a peers. This will output a series of [peer( messages:, f 70;
#N canvas 700 521 753 329 events 0;
#X msg 33 177 peer_leave <group> <user> <id> <IP> <port>;
#X text 345 177 a peer has left the group;
#X text 34 33 events:;
#X msg 33 139 peer_join <group> <user> <id> <IP> <port>;
#X text 344 141 a new peer has joined the group;
#X msg 33 63 peer_handshake <group> <user> <id> <IP> <port>;
#X text 377 61 begin handshake with new peer in group;
#X msg 33 99 peer_timeout <group> <user> <id> <IP> <port>;
#X text 367 96 handshake has timed out - could not establish connection with peer, f 37;
#X msg 33 217 peer_ping <group> <user> <id> <IP> <port> <delay1> <delay2> <rtt>, f 43;
#X text 351 224 received ping (reply) from peer;
#X msg 33 274 msg <delay> <group> <user> <type> <bytes...>;
#X text 356 272 message received from peer. See [pd messages].;
#X restore 305 631 pd events;
#N canvas 638 96 632 620 example 0;
#X msg 78 208 disconnect;
#X msg 364 208 disconnect;
#X obj 328 274 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 46 342 add test bar 1;
#X msg 57 372 remove;
#X msg 337 385 uninvite;
#X msg 327 350 invite test foo 1;
#X msg 215 411 \; pd dsp \$1;
#X obj 215 386 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 67 404 start;
#X msg 76 434 stop;
#X obj 46 527 print FOO;
#X obj 471 447 print BAR;
#X msg 71 175 group_join test _ foo _;
#X msg 328 66 connect localhost 8002;
#X text 50 38 1) connect to (local) server;
#X text 71 150 2) join group "test" as user "foo";
#X text 325 40 1) connect to (local) server;
#X text 357 151 2) join group "test" as user "bar";
#X obj 48 273 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X msg 49 65 connect localhost 8002;
#X msg 356 174 group_join test _ bar _;
#X obj 150 276 print FOO;
#X floatatom 325 569 5 0 0 0 - - - 0;
#X obj 427 570 print SERVER;
#X obj 326 452 env~;
#X floatatom 326 476 5 0 0 0 - - - 0;
#X obj 80 466 osc~ 440;
#X text 322 520 The local AOO server:;
#X obj 325 545 aoo_server 8002;
#X obj 48 248 aoo_client 9990;
#X obj 328 248 aoo_client 9991;
#X obj 46 500 aoo_send~ 1 9990 1;
#X obj 327 421 aoo_receive~ 1 9991 1;
#X text 41 314 Use group|user (instead of IP|port) in AOO source and sink:, f 64;
#X obj 430 275 print BAR;
#X text 67 89 or public server;
#X text 351 89 or public server;
#X msg 62 116 connect vrr.iem.at 7078;
#X msg 343 115 connect vrr.iem.at 7078;
#X connect 0 0 30 0;
#X connect 1 0 31 0;
#X connect 3 0 32 0;
#X connect 4 0 32 0;
#X connect 5 0 33 0;
#X connect 6 0 33 0;
#X connect 8 0 7 0;
#X connect 9 0 32 0;
#X connect 10 0 32 0;
#X connect 13 0 30 0;
#X connect 14 0 31 0;
#X connect 20 0 30 0;
#X connect 21 0 31 0;
#X connect 25 0 26 0;
#X connect 27 0 32 0;
#X connect 29 0 23 0;
#X connect 29 1 24 0;
#X connect 30 0 19 0;
#X connect 30 1 22 0;
#X connect 31 0 2 0;
#X connect 31 1 35 0;
#X connect 32 0 11 0;
#X connect 33 0 25 0;
#X connect 33 1 12 0;
#X connect 38 0 30 0;
#X connect 39 0 31 0;
#X restore 155 119 pd example;
#X obj 47 582 aoo_client 9000;
#X text 384 575 1) port;
#X msg 86 512 port <f>;
#X text 158 514 Set listening port (0 = don't listen), f 38;
#X text 385 551 Creation arguments:;
#X text 172 584 Outlets:;
#X text 38 56 Facilitates communication between several peers in a network., f 64;
#X msg 146 395 group_join 1 <id>;
#X text 279 395 on success and;
#X msg 392 395 group_join 0;
#X text 491 395 on failure.;
#X text 163 193 TIP: You may always use the public AOO server of the IEM: vrr.iem.at 7078, f 76;
#X obj 560 630 aoo_send~;
#X obj 634 630 aoo_receive~;
#N canvas 347 54 741 836 messaging 0;
#X text 314 154 send to all peers in a given group, f 35;
#X text 365 184 send to a single peer;
#X msg 108 397 target;
#X msg 102 366 target <group>;
#X msg 91 334 target <group> <user>;
#X text 252 305 "send" selector is optional;
#X text 255 335 target a single peer;
#X text 213 369 target a group;
#X text 163 397 broadcast (= default);
#X msg 120 591 offset <f>;
#X msg 123 623 offset -1;
#X text 135 664 Incoming messages are sent to the second outlet as, f 51;
#X msg 38 121 broadcast <bytes...>;
#X msg 49 153 send_group <group> <type> <bytes...>;
#X msg 57 185 send_peer <group> <user> <type> <bytes...>;
#X msg 65 215 send_peer <IP> <port> <type> <bytes...>;
#X msg 77 273 send <type> <bytes...>;
#X msg 84 304 list <type> <bytes...>;
#X text 561 222 "raw": raw bytes;
#X text 562 242 "osc": OSC message;
#X text 563 263 "fudi": FUDI message;
#X text 564 285 "midi": MIDI message;
#X text 564 307 "text": plain text;
#X text 564 329 "json": JSON text;
#X text 567 354 "xml": XML text;
#X text 194 122 send a message to all peers;
#X text 206 587 Set the time offset in ms. Use this for scheduling messages in the future to preserve relative timing.;
#X text 208 626 No offset = send immediately. This is the default., f 53;
#X msg 123 469 reliable \$1;
#X obj 123 443 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X text 218 438 enable/disable reliable messaging.;
#X msg 135 689 msg <delay> <group> <user> <type> <data...>;
#X text 132 714 <delay> is the difference in ms between the message timestamp and our current system time. If the delay is negative \, it means the message is late \, i.e. the timestamp has expired before arrival., f 71;
#X text 76 246 b) "target style";
#X text 36 94 a) "direct style";
#N canvas 711 411 605 262 advanced 0;
#X msg 36 59 schedule \$1;
#X obj 36 33 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 134 59 0: don't schedule \, instead output the required delay., f 54;
#X msg 36 118 discard_late \$1;
#X obj 36 93 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 35 196 delay \$1;
#X floatatom 35 170 6 0 0 0 - - - 0;
#X text 110 173 Extra delay in ms (positive or negative!) for automatically scheduled messages. This may be used if messages are always late \, or scheduled too far into the future., f 61;
#X text 133 36 1: automatically schedule incoming messages (= default).;
#X text 163 93 Discard late bundles (off by default).;
#X text 162 115 This is only relevant for automatic scheduling. With manual scheduling \, users can simply filter messages with a negative delay., f 53;
#X connect 1 0 0 0;
#X connect 4 0 3 0;
#X connect 6 0 5 0;
#X restore 619 408 pd advanced;
#X obj 37 688 aoo_client;
#X text 565 197 Pre-defined types:;
#X text 484 408 advanced settings:;
#X text 434 99 Simple example:;
#N canvas 224 224 774 564 example 0;
#X obj 317 177 oscformat bazoo;
#X msg 329 260 target test2 C;
#X msg 335 286 target;
#X msg 340 350 offset \$1;
#X obj 287 415 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 506 418 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 287 389 aoo_client 9993;
#X obj 506 392 aoo_client 9994;
#X msg 324 233 target test2 A;
#X obj 532 182 oscformat bazoo;
#X msg 550 289 target;
#X msg 555 354 offset \$1;
#X msg 539 236 target test2 A;
#X msg 544 263 target test2 B;
#X msg 394 324 -1;
#X msg 609 327 -1;
#X obj 317 201 list prepend osc;
#X floatatom 340 324 6 0 0 0 - - - 0;
#X floatatom 555 328 6 0 0 0 - - - 0;
#X obj 532 206 list prepend osc;
#X msg 306 112 disconnect;
#X msg 287 54 connect localhost 8002;
#X msg 296 82 group_join test2 _ B;
#X msg 525 114 disconnect;
#X msg 506 56 connect localhost 8002;
#X msg 515 84 group_join test2 _ C;
#X obj 536 422 route msg;
#X obj 632 450 route osc;
#X obj 632 476 oscparse;
#X obj 536 450 list split 3;
#X obj 632 423 list trim;
#X obj 320 421 route msg;
#X obj 416 449 route osc;
#X obj 416 475 oscparse;
#X obj 320 449 list split 3;
#X obj 416 422 list trim;
#X obj 320 475 print B;
#X obj 536 476 print C;
#X obj 90 174 oscformat bazoo;
#X msg 90 148 1 2 3;
#X msg 102 257 target test2 C;
#X msg 108 283 target;
#X msg 113 347 offset \$1;
#X obj 60 412 tgl 19 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 167 321 -1;
#X obj 90 198 list prepend osc;
#X floatatom 113 321 6 0 0 0 - - - 0;
#X msg 79 109 disconnect;
#X msg 60 51 connect localhost 8002;
#X obj 93 418 route msg;
#X obj 189 446 route osc;
#X obj 189 472 oscparse;
#X obj 93 446 list split 3;
#X obj 189 419 list trim;
#X obj 60 386 aoo_client 9992;
#X msg 69 79 group_join test2 _ A;
#X msg 317 151 5 6 7;
#X msg 532 157 list foo bar baz;
#X text 162 284 broadcast;
#X text 216 257 only C;
#X msg 97 230 target test2 B;
#X text 209 231 only B;
#X obj 93 472 print A;
#X connect 0 0 16 0;
#X connect 1 0 6 0;
#X connect 2 0 6 0;
#X connect 3 0 6 0;
#X connect 6 0 4 0;
#X connect 6 1 31 0;
#X connect 7 0 5 0;
#X connect 7 1 26 0;
#X connect 8 0 6 0;
#X connect 9 0 19 0;
#X connect 10 0 7 0;
#X connect 11 0 7 0;
#X connect 12 0 7 0;
#X connect 13 0 7 0;
#X connect 14 0 3 0;
#X connect 15 0 11 0;
#X connect 16 0 6 0;
#X connect 17 0 3 0;
#X connect 18 0 11 0;
#X connect 19 0 7 0;
#X connect 20 0 6 0;
#X connect 21 0 6 0;
#X connect 22 0 6 0;
#X connect 23 0 7 0;
#X connect 24 0 7 0;
#X connect 25 0 7 0;
#X connect 26 0 29 0;
#X connect 27 0 28 0;
#X connect 28 0 37 0;
#X connect 29 0 37 0;
#X connect 29 1 30 0;
#X connect 30 0 27 0;
#X connect 31 0 34 0;
#X connect 32 0 33 0;
#X connect 33 0 36 0;
#X connect 34 0 36 0;
#X connect 34 1 35 0;
#X connect 35 0 32 0;
#X connect 38 0 45 0;
#X connect 39 0 38 0;
#X connect 40 0 54 0;
#X connect 41 0 54 0;
#X connect 42 0 54 0;
#X connect 44 0 42 0;
#X connect 45 0 54 0;
#X connect 46 0 42 0;
#X connect 47 0 54 0;
#X connect 48 0 54 0;
#X connect 49 0 52 0;
#X connect 50 0 51 0;
#X connect 51 0 62 0;
#X connect 52 0 62 0;
#X connect 52 1 53 0;
#X connect 53 0 50 0;
#X connect 54 0 43 0;
#X connect 54 1 49 0;
#X connect 55 0 54 0;
#X connect 56 0 0 0;
#X connect 57 0 9 0;
#X connect 60 0 54 0;
#X restore 550 100 pd example;
#X text 33 32 Clients may sent messages to one or more peers. A message consists off a <type> symbol followed by a list of bytes \, just like in stream metadata and stream messages. The type may be pre-defined (see list below) or user-defined., f 85;
#X text 219 460 By default \, messages are unreliable \, i.e. they might get lost due to packet loss or be received out of order.;
#X text 127 495 If "reliable" is turned on \, messages are guaranteed to arrive (in order). However \, this may cause unpredictable latencies and head-of-line blocking \, as the client may need to wait for messages to be resent by the peer., f 75;
#X text 128 547 NOTE: you can enable/disable "reliable" per message as needed., f 63;
#X text 73 765 NOTE: the (original) delay is also output for automatically scheduled messages \, so you may correct the timing with the "delay" message \, see [pd advanced]., f 79;
#X text 250 268 send a message to the current target (more efficient than the methods above), f 40;
#X connect 2 0 36 0;
#X connect 3 0 36 0;
#X connect 4 0 36 0;
#X connect 9 0 36 0;
#X connect 10 0 36 0;
#X connect 12 0 36 0;
#X connect 13 0 36 0;
#X connect 14 0 36 0;
#X connect 15 0 36 0;
#X connect 16 0 36 0;
#X connect 17 0 36 0;
#X connect 28 0 36 0;
#X connect 29 0 28 0;
#X restore 254 550 pd messaging;
#N canvas 562 87 788 348 details 0;
#X text 36 82 Once the client has joined a group \, it receives a list of all existing peers in that group and is notified whenever a peer joins/leaves the group., f 95;
#X text 36 40 The AOO client first connects to an AOO server. For the internet \, the server has to be publicly accessable. For local networks \, the server may be private \, i.e. run on a user's machine., f 98;
#X text 36 118 Peers may send each other messages over the internet \, which wouldn't be possible otherwise because of NAT and firewalls. For more info see https://en.wikipedia.org/wiki/UDP_hole_punching., f 97;
#X text 35 160 A peer is referenced by its group and user name \, so that <group> <user> effectively replaces <host> <port> in all relevant methods and events for [aoo_send~] and [aoo_receive~]., f 98;
#X text 34 195 All AOO objects on the same port share the same peer list. Here is a simple example:, f 85;
#X text 35 223 In addition \, peers also have a user ID \, IP address and port number. The user ID is a unique number for each user in a group., f 94;
#X text 70 258 TIP: the user ID helps to faciliate ad hoc peer-to-peer audio streaming. The client would pick [aoo_receive~] objects for each peer and use the peer's user ID as the sink ID. The peer would in turn use its *own* user ID for its [aoo_send~] object., f 90;
#X restore 154 88 pd details;
#X text 39 89 More details:;
#X text 39 120 Simple example:;
#X connect 4 0 28 0;
#X connect 5 0 28 0;
#X connect 10 0 28 0;
#X connect 13 0 28 0;
#X connect 16 0 28 0;
#X connect 30 0 28 0;
