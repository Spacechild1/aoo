#N canvas 493 32 1074 721 12;
#X declare -lib aoo;
#X obj 45 222 aoo_server 8002;
#X obj 51 671 declare -lib aoo;
#X obj 48 464 aoo_client 1000;
#X obj 288 458 aoo_client 1001;
#X msg 48 358 connect localhost 8002 foo foo;
#X msg 64 409 group_join test test;
#X msg 304 408 group_join test test;
#X msg 57 383 disconnect;
#X msg 297 383 disconnect;
#X msg 288 358 connect localhost 8002 bar bar;
#X floatatom 45 247 5 0 0 0 - - -;
#N canvas 71 488 450 221 events 0;
#X obj 37 37 inlet;
#X obj 37 62 print aoo_server;
#X text 31 93 [user_join <user>(: a new user connected to the server
;
#X text 31 114 [user_leave <user>(: a user disconnected from the server
;
#X text 30 136 [group_join <group> <user>(: a user joined a group;
#X text 29 160 [group_leave <group> <user>(: a user left a group;
#X connect 0 0 1 0;
#X restore 147 247 pd events;
#X text 43 276 outlets:;
#X text 56 297 1) number of connected users;
#X text 56 317 2) events;
#X text 42 44 Clients connect to the server to obtain the mutual public
IP address of their peers \, which they don't know in advance. This
enables peers to send each other messages without having to enable
port forwarding on their systems., f 70;
#X text 42 112 For more info \, see: https://en.wikipedia.org/wiki/UDP_hole_punching
, f 68;
#X text 43 15 [aoo_server] / [aoo_client]: objects for UDP hole punching
;
#X text 41 147 [aoo_server]: the UDP punch hole server;
#X text 564 17 [aoo_client]: the client;
#X obj 390 484 print client B;
#X obj 150 488 print client A;
#X text 563 143 creation arguments:;
#X text 224 217 creation arguments:;
#X text 241 239 1) port number;
#X text 42 173 The server must be publicly accessible and the port
number must be known by all clients.;
#X text 587 163 1) port number, f 15;
#X text 564 47 The client connects to the server. It first has to register
as a user and then join one or more groups. Once it has joined a group
\, it will receive the name of all peers in the same group. Now you
can use "group user" instead of "IP port" anywhere in any AoO objects
which share same port number.;
#X obj 565 540 aoo_client;
#X msg 565 215 connect <serverIP> <serverport> <username> <password>
;
#X text 565 189 messages:;
#X msg 576 330 disconnect;
#X text 661 329 disconnect from the server;
#X obj 48 488 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 288 484 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X text 561 570 outlets:;
#X text 561 592 1) connection status;
#X text 641 611 [group_join <group>( - successfully joined a group
;
#X text 642 633 [group_left <group>( - successfully joined a group
;
#X msg 69 436 group_leave test;
#X msg 310 433 group_leave test;
#X obj 416 639 print aoo_receive;
#X obj 49 634 print aoo_send;
#X msg 584 361 group_join <group> <password>;
#X text 734 481 leave a group;
#X msg 582 478 group_leave <group>;
#X text 592 437 After you have joined the group \, you will get a [peer_join(
message for every new or existing peer in the group., f 61;
#X text 642 654 [peer_join <group> <user>( - a peer joined the group
;
#X text 642 676 [peer_leave <group> <user>( - a peer left the group
;
#X obj 49 609 aoo_send~ 1000 1;
#X obj 286 613 aoo_receive~ 1001 1;
#X msg 49 558 add test bar 1;
#X text 45 524 The following works once both clients have joined the
group "test":, f 68;
#X msg 57 583 remove;
#X msg 296 586 uninvite;
#X msg 286 561 invite test foo 1;
#X msg 191 622 \; pd dsp \$1;
#X obj 191 601 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 582 288 this method is *asynchronous* and will output 1 or
0 on success or failure.;
#X text 582 238 connect to the server as a user. although the password
will be hashed \, better don't use the one of your e-mail or banking
account :-), f 61;
#X text 562 612 2) events:;
#X msg 589 509 list_peers;
#X text 591 385 After you have connected as a user \, you can join
a group.;
#X text 591 403 The group password is shared by all users. If you don't
care about too much about security \, just use the group name itself.
, f 63;
#X text 677 508 list all a peers. This will output a series of [peer
<group> <user>( messages., f 44;
#X connect 0 0 10 0;
#X connect 0 1 11 0;
#X connect 2 0 33 0;
#X connect 2 1 21 0;
#X connect 3 0 34 0;
#X connect 3 1 20 0;
#X connect 4 0 2 0;
#X connect 5 0 2 0;
#X connect 6 0 3 0;
#X connect 7 0 2 0;
#X connect 8 0 3 0;
#X connect 9 0 3 0;
#X connect 29 0 28 0;
#X connect 31 0 28 0;
#X connect 39 0 2 0;
#X connect 40 0 3 0;
#X connect 43 0 28 0;
#X connect 45 0 28 0;
#X connect 49 0 42 0;
#X connect 50 1 41 0;
#X connect 51 0 49 0;
#X connect 53 0 49 0;
#X connect 54 0 50 0;
#X connect 55 0 50 0;
#X connect 57 0 56 0;
#X connect 61 0 28 0;
