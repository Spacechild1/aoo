#N canvas 234 73 680 687 12;
#X declare -lib aoo;
#X text 234 439 creation arguments:;
#X obj 48 487 osc~ 440;
#X obj 152 488 osc~ 220;
#X obj 48 513 *~ 0.25;
#X obj 152 514 *~ 0.25;
#X msg 29 52 add localhost 9999 1;
#X text 26 19 aoo_send~: send an AoO audio stream to one or more AoO
sinks;
#X msg 44 112 remove localhost 9999 1;
#X text 223 111 remove an AoO sink (hostname \, port \, sink ID);
#X text 106 144 remove all AoO sinks;
#X text 185 52 add an AoO sink (hostname \, port \, sink ID \, [channel
onset]);
#X text 212 81 with optional channel onset;
#X msg 575 632 \; pd dsp \$1;
#X obj 575 608 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X msg 60 175 list_sinks;
#X text 147 172 list all sinks. This will output a message [sink <host>
<port> <id>( for each sink., f 44;
#X obj 29 601 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X msg 37 81 add localhost 9999 1 1;
#X msg 77 248 stop;
#X msg 68 214 start;
#X obj 478 19 declare -lib aoo;
#X obj 29 541 aoo_send~ 9998 1 2;
#N canvas 681 50 632 660 events 0;
#X obj 37 26 inlet;
#X obj 37 120 outlet;
#X text 64 214 It also tells you the network latency:;
#X text 66 235 <delta1> is the approx. delay between source and sink
(in ms), f 62;
#X text 66 256 <delta2> is the approx. delay between sink and source
(in ms), f 62;
#X text 66 276 <rtt> is the approx. roundtrip time (in ms) \, as measured
on the source, f 71;
#X text 67 298 NOTE: The roundtrip time is not necessarily the same
as the sum of the deltas \, especially if the two clocks are not perfectly
in sync. If one clock runs significantly early or late \, the deltas
can even be negative!, f 73;
#X text 62 418 This event is only sent when auto accept is turned off
with [accept 0(., f 73;
#X text 62 514 This event is only sent when auto accept is turned off
with [accept 0(., f 73;
#X text 63 396 You may respond with [add <host> <port> <ID>( or ignore
it.;
#X text 62 491 You may respond with [remove <host> <port> <ID>( or
ignore it., f 62;
#X text 64 374 A sink invites you to send audio messages.;
#X text 64 174 A periodic message exchanged between source and sink
\, so the source knows that the sink is receiving its messages.;
#X obj 37 50 route ping, f 17;
#X obj 153 122 print aoo_send~;
#X text 62 616 A sink has been removed., f 25;
#X obj 37 75 t a a;
#X obj 153 94 spigot;
#X obj 192 73 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 217 72 show pings;
#X text 64 469 A sink asks you to stop sending audio messages.;
#X text 62 564 A sink has been added.;
#X msg 37 152 ping <host> <port> <ID> <delta1> <delta2> <rtt>;
#X msg 37 351 invite <host> <port> <ID>;
#X msg 36 444 uninvite <host> <port> <ID>;
#X msg 33 538 sink_add <host> <port> <ID>;
#X msg 33 590 sink_remove <host> <port> <ID>;
#X connect 0 0 13 0;
#X connect 13 0 16 0;
#X connect 13 1 14 0;
#X connect 16 0 1 0;
#X connect 16 1 17 0;
#X connect 17 0 14 0;
#X connect 18 0 17 1;
#X restore 29 570 pd events;
#X text 50 599 ping;
#X text 117 215 start streaming;
#X text 123 248 stop streaming;
#X text 233 490 2) the source ID \, must be unique for all;
#X text 251 510 [aoo_send~] instances on this port.;
#X obj 121 575 aoo_send~ 9998 2 2;
#X text 262 575 another source on the same port;
#X obj 121 606 aoo_receive~ 9998 1 2;
#X text 232 536 3) number of channels (default: 1);
#X text 233 464 1) port number for incoming messages \, e.g. invitations
;
#X text 283 606 the same port can also be used by sinks;
#X msg 53 143 remove;
#N canvas 705 62 666 671 advanced 0;
#X obj 80 234 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X msg 80 253 packetsize \$1;
#X text 189 252 max. UDP packet size (default: 512 bytes);
#X obj 89 283 nbx 8 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X msg 89 302 timefilter \$1;
#X text 193 303 time DLL filter bandwidth (default: 0.0001);
#X obj 94 337 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 174 337 buffersize (ms) for resending lost packets (default:
1000);
#X msg 69 204 ping \$1;
#X obj 69 183 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 135 204 set ping interval in ms (default: 1000) \, 0 = off
;
#X msg 52 148 accept \$1;
#X obj 52 127 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X text 156 170 has to be handled manually.;
#X msg 29 48 port \$1;
#X obj 29 28 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X msg 41 96 id \$1;
#X obj 41 77 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0 10
-262144 -1 -1 0 256;
#X text 98 47 change receive port;
#X text 98 97 change AoO source ID;
#X msg 100 413 redundancy \$1;
#X obj 100 393 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 210 390 how often each packet should be sent (default: 1);
#X msg 104 559 codec_set <param> <value>;
#X msg 105 592 codec_get <param>;
#X text 240 591 get the value of a codec parameter;
#X obj 29 628 s \$0-msg;
#X obj 102 453 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X msg 102 475 channel localhost 9999 1 \$1;
#X text 309 476 set sink channel onset;
#X text 241 612 responds with a [codec_get <param> <value>( message.
;
#X text 210 412 redundancy might help to reduce packet loss \, at the
cost of increased network traffic., f 44;
#X text 296 560 set the value of a codec parameter;
#X text 104 531 see the relevant codec subpatch for available parameters.
;
#X text 104 511 set/get a parameter of the currently selected codec.
;
#X msg 94 358 resend \$1;
#X text 175 358 set to 0 to disable packet resending.;
#X text 130 130 1: automatically accept all (un)invitations from sinks
(= default), f 67;
#X text 131 151 0: (un)invitations cause an [invite( resp. [uninvite(
event which, f 66;
#X connect 0 0 1 0;
#X connect 1 0 26 0;
#X connect 3 0 4 0;
#X connect 4 0 26 0;
#X connect 6 0 35 0;
#X connect 8 0 26 0;
#X connect 9 0 8 0;
#X connect 11 0 26 0;
#X connect 12 0 11 0;
#X connect 14 0 26 0;
#X connect 15 0 14 0;
#X connect 16 0 26 0;
#X connect 17 0 16 0;
#X connect 20 0 26 0;
#X connect 21 0 20 0;
#X connect 23 0 26 0;
#X connect 24 0 26 0;
#X connect 27 0 28 0;
#X connect 28 0 26 0;
#X connect 35 0 26 0;
#X restore 80 407 pd advanced;
#X text 25 646 see also;
#X obj 98 646 aoo_receive~;
#X obj 201 646 aoo_client;
#X obj 287 646 aoo_server;
#N canvas 595 120 529 559 metadata 0;
#X msg 31 325 metadata <type> <data...>;
#X msg 46 354 metadata;
#X text 30 143 The metadata consists of a 'type' symbol \, followed
by a list of bytes. 'type' can be either a user-defined name or one
of the following pre-defined names:;
#X text 39 197 "text": UTF-8 encoded plain text;
#X text 41 216 "json": UTF-8 encoded JSON;
#X text 42 238 "xml": UTF-8 encoded XML;
#X text 43 261 "osc": an OSC message;
#X text 120 354 unset metadata;
#X obj 62 414 oscformat;
#X text 30 71 The metadata will be output in the [aoo_receive~] object
as part of the 'start' event message., f 60;
#X text 31 35 Users can add stream metadata to inform the other end
about properties like channel layout \, musical information \, etc.
, f 60;
#X msg 62 385 set /foo \, 1 2 3;
#X obj 62 443 list prepend metadata osc;
#X text 30 108 The actual content and its interpretation is user-defined
and will be different for each application., f 58;
#X obj 251 413 fudiformat;
#X text 139 414 "osc";
#X text 333 414 "fudi";
#X text 42 285 "fudi": a FUDI message;
#X obj 62 471 list trim;
#X obj 251 443 list prepend metadata fudi;
#X msg 251 385 /foo 1 2 3;
#X obj 31 506 s \$0-msg;
#X connect 0 0 21 0;
#X connect 1 0 21 0;
#X connect 8 0 12 0;
#X connect 11 0 8 0;
#X connect 12 0 18 0;
#X connect 14 0 19 0;
#X connect 18 0 21 0;
#X connect 19 0 18 0;
#X connect 20 0 14 0;
#X restore 85 282 pd metadata;
#X msg 86 320 format <codec> <channels> <blocksize> <sr> ..., f 48
;
#X obj 69 457 r \$0-msg;
#X text 176 282 set stream metadata;
#X text 171 407 advanced settings;
#N canvas 489 105 551 589 format 0;
#X msg 256 158 2;
#X msg 267 185 3;
#X msg 273 211 4;
#X msg 279 236 8;
#X obj 256 292 t b f;
#X msg 189 202 44100;
#X msg 196 229 48000;
#X msg 180 177 22050;
#X obj 172 290 t b f;
#X msg 110 178 64;
#X msg 119 203 128;
#X msg 126 228 256;
#X msg 133 254 512;
#X obj 101 156 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X obj 172 157 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 299 158 16-bit integer;
#X text 306 184 24-bit integer;
#X text 317 236 64-bit float;
#X text 97 134 blocksize;
#X text 172 134 samplerate;
#X text 128 426 all arguments are optional!;
#X msg 41 426 format pcm;
#X text 255 134 bitdepth;
#X text 311 211 32-bit float (default);
#X obj 31 156 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 29 133 channels;
#X obj 101 291 t b f;
#X obj 31 324 pack 2 64 44100 4, f 37;
#X msg 31 393 format pcm \$1 \$2 \$3 \$4;
#X text 27 52 PCM gives you maximum audio quality at the cost of high
data rates and no packet loss concealment (missing packets just produce
silence)., f 71;
#X text 26 25 PCM (uncompressed);
#X text 27 87 It is a good choice for LANs or inter-app streaming \,
but for unreliable networks (like the internet) the "opus" codec should
be preferred., f 72;
#X msg 43 358 [format pcm <nchannels> <blocksize> <samplerate> <bitdepth>(
;
#X text 47 478 (here we only specify the blocksize and bit depth),
f 52;
#X obj 31 543 s \$0-msg;
#X text 49 456 you can skip individual arguments with "_";
#X msg 47 502 format pcm _ 256 _ 4;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 4 0 27 0;
#X connect 4 1 27 3;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 8 0 27 0;
#X connect 8 1 27 2;
#X connect 9 0 26 0;
#X connect 10 0 26 0;
#X connect 11 0 26 0;
#X connect 12 0 26 0;
#X connect 13 0 26 0;
#X connect 14 0 8 0;
#X connect 21 0 34 0;
#X connect 24 0 27 0;
#X connect 26 0 27 0;
#X connect 26 1 27 1;
#X connect 27 0 28 0;
#X connect 28 0 34 0;
#X connect 36 0 34 0;
#X restore 374 373 pd format pcm;
#N canvas 543 103 887 643 format 0;
#X msg 194 194 48000;
#X obj 105 171 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X obj 183 171 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 177 148 samplerate;
#X obj 499 135 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X obj 501 371 nbx 5 14 0 10 0 0 empty empty empty 0 -8 0 10 -262144
-1 -1 0 256;
#X msg 49 489 format opus;
#X text 139 489 all arguments are optional!;
#X text 496 310 complexity (0 - 10);
#X text 497 456 signal type;
#X msg 500 503 auto;
#X msg 542 503 music;
#X msg 592 503 voice;
#X text 100 149 blocksize;
#X msg 199 221 24000;
#X text 497 333 higher values give better quality but need more CPU
power. the default is 9, f 38;
#X msg 204 249 16000;
#X msg 208 277 12000;
#X msg 215 303 8000;
#X obj 37 172 nbx 5 14 -1e+037 1e+037 0 0 empty empty empty 0 -8 0
10 -262144 -1 -1 0 256;
#X text 31 149 channels;
#X text 570 134 NOTE: this is the *total* bitrate!;
#X text 31 23 Opus codec (compressed);
#X text 31 50 Opus is a low latency codec explicitly designed for streaming
audio over the internet \, see http://opus-codec.org/, f 63;
#X text 30 86 It offers good audio quality even at low data rates and
does packet loss concealment to hide the effects of packet loss in
unreliable networks., f 61;
#X text 264 149 application type;
#X msg 274 179 audio;
#X msg 281 215 voip;
#X msg 286 253 lowdelay;
#X msg 116 194 120;
#X msg 123 221 240;
#X msg 126 249 480;
#X msg 132 276 960;
#X msg 137 303 1920;
#X msg 52 405 format opus <nchannels> <blocksize> <samplerate> <application>
, f 37;
#X text 54 540 (here we only specify the blocksize and application
type), f 58;
#X text 359 246 optimize for low latency, f 13;
#X text 326 174 high fidelity (default), f 15;
#X text 327 209 optimize for VoIP applications, f 18;
#X msg 664 261 codec_get bitrate;
#X text 663 237 get current bitrate;
#X text 679 379 get current complexity;
#X msg 681 405 codec_get complexity;
#X text 659 544 get current signal type;
#X msg 499 251 codec_set bitrate \$1;
#X obj 274 313 symbol;
#X obj 36 373 pack 2 480 48000 s, f 39;
#X obj 105 340 t b a;
#X obj 183 340 t b a;
#X obj 274 342 t b a;
#X msg 501 396 codec_set complexity \$1;
#X obj 500 536 symbol;
#X msg 500 563 codec_set signal \$1;
#X obj 36 600 s \$0-msg;
#X obj 499 280 s \$0-msg;
#X obj 501 424 s \$0-msg;
#X obj 500 591 s \$0-msg;
#X msg 661 571 codec_get signal;
#X text 497 63 NOTE: you must first set the format to "opus"!;
#X text 498 113 bitrate (kbit/s);
#X msg 36 454 format opus \$1 \$2 \$3 \$4;
#X obj 332 313 loadbang;
#X msg 332 337 symbol audio;
#X text 57 518 you can skip individual arguments with "_";
#X msg 56 566 format opus _ 240 _ lowdelay;
#X text 495 35 Additional codec parameters;
#X text 496 81 parameters are reset with each [format( message!;
#X msg 516 213 symbol max;
#X msg 508 184 symbol auto;
#X text 509 157 64 kbit/s per channel is considered transparent.;
#X text 600 183 use automatic bitrate;
#X text 600 213 use maximum bitrate;
#X text 497 477 optimize for music or speech \, or use auto mode;
#X connect 0 0 48 0;
#X connect 1 0 47 0;
#X connect 2 0 48 0;
#X connect 4 0 44 0;
#X connect 5 0 50 0;
#X connect 6 0 53 0;
#X connect 10 0 51 0;
#X connect 11 0 51 0;
#X connect 12 0 51 0;
#X connect 14 0 48 0;
#X connect 16 0 48 0;
#X connect 17 0 48 0;
#X connect 18 0 48 0;
#X connect 19 0 46 0;
#X connect 26 0 45 0;
#X connect 27 0 45 0;
#X connect 28 0 45 0;
#X connect 29 0 47 0;
#X connect 30 0 47 0;
#X connect 31 0 47 0;
#X connect 32 0 47 0;
#X connect 33 0 47 0;
#X connect 39 0 54 0;
#X connect 42 0 55 0;
#X connect 44 0 54 0;
#X connect 45 0 49 0;
#X connect 46 0 60 0;
#X connect 47 0 46 0;
#X connect 47 1 46 1;
#X connect 48 0 46 0;
#X connect 48 1 46 2;
#X connect 49 0 46 0;
#X connect 49 1 46 3;
#X connect 50 0 55 0;
#X connect 51 0 52 0;
#X connect 52 0 56 0;
#X connect 57 0 56 0;
#X connect 60 0 53 0;
#X connect 61 0 62 0;
#X connect 62 0 46 3;
#X connect 64 0 53 0;
#X connect 67 0 44 0;
#X connect 68 0 44 0;
#X restore 479 373 pd format opus;
#X text 241 373 available codecs:;
#X text 437 322 set the streaming format;
#X text 242 347 outputs a [format( message with the validated format.
;
#X text 243 216 HINT: you can use these two methods to send short "audio
messages" instead of continuous streams. Each "message" can contain
additional metadata., f 50;
#X connect 1 0 3 0;
#X connect 2 0 4 0;
#X connect 3 0 21 0;
#X connect 4 0 21 1;
#X connect 5 0 21 0;
#X connect 7 0 21 0;
#X connect 13 0 12 0;
#X connect 14 0 21 0;
#X connect 17 0 21 0;
#X connect 18 0 21 0;
#X connect 19 0 21 0;
#X connect 21 0 22 0;
#X connect 22 0 16 0;
#X connect 34 0 21 0;
#X connect 41 0 21 0;
#X connect 42 0 21 0;
