#N canvas 260 98 659 738 12;
#X declare -lib aoo;
#X text 234 459 creation arguments:;
#X obj 48 461 osc~ 440;
#X obj 152 462 osc~ 220;
#X obj 48 487 *~ 0.25;
#X obj 152 488 *~ 0.25;
#X msg 533 451 \; pd dsp \$1;
#X obj 533 427 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X obj 29 615 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000;
#X msg 61 167 stop;
#X msg 52 127 start;
#X obj 469 20 declare -lib aoo;
#N canvas 690 112 652 719 events 0;
#X obj 37 26 inlet;
#X obj 37 84 outlet;
#X text 52 507 It also tells you the network latency:;
#X text 54 530 <delta1> is the approx. delay between source and sink (in ms), f 62;
#X text 54 554 <delta2> is the approx. delay between sink and source (in ms), f 62;
#X text 66 139 A sink invites you to send audio messages.;
#X text 52 467 A periodic message exchanged between source and sink \, so the source knows that the sink is receiving its messages., f 73;
#X obj 115 56 tgl 19 0 \$0-ping \$0-ping empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X msg 38 242 uninvite <host> <port> <ID>;
#X text 64 355 A sink has been added \, either by the user or through an invitation., f 68;
#X text 64 407 A sink has been removed by the user.;
#X msg 39 116 invite <host> <port> <ID> [<type> <data...>], f 46;
#X text 64 162 'type' and 'data' are the (optional) invitation metadata \, see [pd metadata] in [aoo_receive~].;
#N canvas 210 311 480 403 route 0;
#X obj 47 40 inlet;
#X obj 47 245 outlet;
#X obj 79 216 print aoo_send~;
#X obj 118 98 r \$0-ping;
#X obj 79 126 spigot;
#X obj 47 98 t b a;
#X obj 79 153 list prepend ping;
#X obj 79 185 list trim;
#X obj 244 274 route osc fudi, f 20;
#X obj 244 304 oscparse;
#X obj 312 304 fudiparse;
#X obj 244 247 list trim;
#X obj 247 217 list split 3;
#X text 131 126 filter pings;
#X obj 279 127 print aoo_send~;
#X obj 47 69 route ping, f 29;
#X obj 247 99 t a a;
#X obj 247 187 route invite;
#X text 260 160 parse invite metadata;
#X obj 244 332 print DATA;
#X connect 0 0 15 0;
#X connect 3 0 4 1;
#X connect 4 0 6 0;
#X connect 5 0 1 0;
#X connect 5 1 4 0;
#X connect 6 0 7 0;
#X connect 7 0 2 0;
#X connect 8 0 9 0;
#X connect 8 1 10 0;
#X connect 9 0 19 0;
#X connect 10 0 19 0;
#X connect 11 0 8 0;
#X connect 12 1 11 0;
#X connect 15 0 5 0;
#X connect 15 1 16 0;
#X connect 16 0 17 0;
#X connect 16 1 14 0;
#X connect 17 0 12 0;
#X restore 37 54 pd route;
#X f 9;
#X text 140 55 post pings;
#X msg 35 329 add <host> <port> <ID>;
#X msg 35 381 remove <host> <port> <ID>;
#X text 66 267 A sink asks you to stop sending audio messages.;
#X text 36 736 ---;
#X text 65 198 If 'auto_invite' is off \, you have to manually accept it with the [invite( method - or ignore it., f 66;
#X text 64 288 If 'auto_invite' is off \, you have to manually accept it with the [uninvite( method - or ignore it., f 66;
#X text 55 640 NOTE: The roundtrip time is not necessarily the same as the sum of the deltas \, especially if the clocks are not perfectly in sync. If one clock runs significantly early or late \, the deltas can even be negative!, f 73;
#X text 52 695 <packetloss> is the current packet loss in percent (averaged between pings). If you encounter continuous high packet loss \, you might want to adjust the codec settings (e.g. reduce the bandwidth)., f 74;
#X msg 35 440 ping <host> <port> <ID> <delta1> <delta2> <network_rtt> <total_rtt> <packet_loss>, f 81;
#X text 54 575 <network_rtt> is the approx. network roundtrip time (in ms) \, as measured on the source., f 74;
#X text 54 612 <total_rtt> is the total roundtrip time (in ms), f 49;
#X connect 0 0 13 0;
#X connect 13 0 1 0;
#X restore 29 584 pd events;
#X text 50 613 ping;
#X text 101 128 start streaming;
#X text 107 167 stop streaming;
#X text 322 615 another source on the same port;
#X text 343 646 the same port can also be used by sinks;
#N canvas 705 62 656 838 advanced 0;
#X msg 111 522 packetsize \$1;
#X text 220 521 max. UDP packet size (default: 512 bytes);
#X text 167 252 buffersize (ms) for resending lost packets (default: 1000);
#X msg 62 164 ping \$1;
#X text 128 164 set ping interval in ms (default: 1000) \, 0 = off;
#X msg 39 58 port \$1;
#X msg 51 112 id \$1;
#X text 107 60 change receive port;
#X msg 90 332 redundancy \$1;
#X text 200 300 how often each packet should be sent (default: 1);
#X msg 94 415 codec_set <param> <value>;
#X msg 108 448 codec_get <param>;
#X text 243 447 get the value of a codec parameter;
#X obj 39 774 s \$0-msg;
#X text 244 468 responds with a [codec_get <param> <value>( message.;
#X text 200 322 redundancy might help to reduce packet loss \, at the cost of increased network traffic., f 44;
#X text 288 416 set the value of a codec parameter;
#X text 95 387 see the relevant codec subpatch for available parameters.;
#X text 95 367 set/get a parameter of the currently selected codec.;
#X msg 82 271 resend \$1;
#X text 168 273 set to 0 to disable packet resending.;
#X msg 125 638 dll_bandwith \$1;
#X msg 116 585 dynamic_resampling \$1;
#X msg 86 32 0;
#X text 121 33 stop listening;
#X text 282 572 enable/disable dynamic resampling (off by default), f 34;
#X text 247 624 time DLL filter bandwidth for dynamic resampling (default: 0.0001), f 38;
#X msg 144 745 binary \$1;
#X obj 144 720 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X floatatom 39 30 5 0 0 0 - - - 0;
#X floatatom 51 88 5 0 0 0 - - - 0;
#X floatatom 62 140 5 0 0 0 - - - 0;
#X floatatom 82 246 5 0 0 0 - - - 0;
#X floatatom 90 306 5 0 0 0 - - - 0;
#X floatatom 111 496 6 0 0 0 - - - 0;
#X obj 116 559 tgl 19 0 empty empty empty 0 -10 0 12 #fcfcfc #000000 #000000 0 1;
#X floatatom 125 614 8 0 0 0 - - - 0;
#X text 225 733 enable/disable binary message format (on by default), f 36;
#X floatatom 73 193 5 0 0 0 - - - 0;
#X msg 73 217 stream_time \$1;
#X text 190 217 set stream timestamp interval in ms (default: 1000) \, 0 = off;
#X text 108 113 change AOO source ID;
#X floatatom 135 670 8 0 0 0 - - - 0;
#X msg 135 693 buffersize \$1;
#X text 248 695 set send buffer size in ms (default: 25 ms);
#X connect 0 0 13 0;
#X connect 3 0 13 0;
#X connect 5 0 13 0;
#X connect 6 0 13 0;
#X connect 8 0 13 0;
#X connect 10 0 13 0;
#X connect 11 0 13 0;
#X connect 19 0 13 0;
#X connect 21 0 13 0;
#X connect 22 0 13 0;
#X connect 23 0 5 0;
#X connect 27 0 13 0;
#X connect 28 0 27 0;
#X connect 29 0 5 0;
#X connect 30 0 6 0;
#X connect 31 0 3 0;
#X connect 32 0 19 0;
#X connect 33 0 8 0;
#X connect 34 0 0 0;
#X connect 35 0 22 0;
#X connect 36 0 21 0;
#X connect 38 0 39 0;
#X connect 39 0 13 0;
#X connect 42 0 43 0;
#X connect 43 0 13 0;
#X restore 420 365 pd advanced;
#X text 285 686 see also;
#X obj 358 686 aoo_receive~;
#X obj 461 686 aoo_client;
#X obj 547 686 aoo_server;
#N canvas 777 116 493 626 metadata 0;
#X text 39 217 "text": UTF-8 encoded plain text;
#X text 40 238 "json": UTF-8 encoded JSON;
#X text 41 260 "xml": UTF-8 encoded XML;
#X text 42 283 "osc": an OSC message;
#X obj 47 453 oscformat;
#X text 30 128 The actual content and its interpretation is user-defined and will be different for each application., f 58;
#X obj 219 467 fudiformat;
#X text 124 453 "osc";
#X text 301 468 "fudi";
#X text 41 307 "fudi": a FUDI message;
#X obj 47 510 list trim;
#X obj 31 576 s \$0-msg;
#X text 43 351 "raw" or "binary": raw bytes;
#X text 42 330 "midi": a MIDI message;
#X text 31 35 Users can add stream metadata to the "start" message to inform the other end about properties like channel layout \, musical information \, etc.;
#X msg 31 385 start <type> <data...>;
#X obj 47 482 list prepend start osc;
#X obj 219 497 list prepend start fudi;
#X msg 59 543 stop;
#X msg 219 439 foo 1 2 3;
#X text 30 91 The metadata will be output in the [aoo_receive~] object as part of the "start" event message., f 60;
#X text 30 163 The metadata consists of a "type" symbol \, followed by a list of bytes. "type" can be either a user-defined name or one of the following pre-defined names:;
#X msg 47 424 set foo \, 1 2 3;
#X connect 4 0 16 0;
#X connect 6 0 17 0;
#X connect 10 0 11 0;
#X connect 15 0 11 0;
#X connect 16 0 10 0;
#X connect 17 0 10 0;
#X connect 18 0 11 0;
#X connect 19 0 6 0;
#X connect 22 0 4 0;
#X restore 439 133 pd metadata;
#X msg 74 273 format <codec> <channels> <blocksize> <sr> ..., f 48;
#X obj 59 523 r \$0-msg;
#N canvas 489 105 551 606 format 0;
#X msg 256 168 2;
#X msg 267 195 3;
#X msg 273 221 4;
#X msg 279 246 8;
#X obj 256 302 t b f;
#X msg 189 212 44100;
#X msg 196 239 48000;
#X msg 180 187 22050;
#X obj 172 300 t b f;
#X msg 110 188 64;
#X msg 119 213 128;
#X msg 126 238 256;
#X msg 133 264 512;
#X text 299 168 16-bit integer;
#X text 306 194 24-bit integer;
#X text 317 246 64-bit float;
#X text 97 134 blocksize;
#X text 172 134 samplerate;
#X text 128 436 all arguments are optional!;
#X msg 41 436 format pcm;
#X text 255 134 bitdepth;
#X text 311 221 32-bit float (default);
#X text 29 133 channels;
#X obj 101 301 t b f;
#X msg 31 403 format pcm \$1 \$2 \$3 \$4;
#X text 27 52 PCM gives you maximum audio quality at the cost of high data rates and no packet loss concealment (missing packets just produce silence)., f 71;
#X text 26 25 PCM (uncompressed);
#X text 27 87 It is a good choice for LANs or inter-app streaming \, but for unreliable networks (like the internet) the "opus" codec should be preferred., f 72;
#X msg 43 368 [format pcm <nchannels> <blocksize> <samplerate> <bitdepth>(;
#X text 47 488 (here we only specify the blocksize and bit depth), f 52;
#X obj 31 553 s \$0-msg;
#X text 49 466 you can skip individual arguments with "_";
#X msg 47 512 format pcm _ 256 _ 4;
#X floatatom 31 162 5 0 0 0 - - - 0;
#X floatatom 101 162 5 0 0 0 - - - 0;
#X floatatom 172 161 5 0 0 0 - - - 0;
#X obj 31 334 pack 2 64 f 4, f 37;
#X obj 314 308 loadbang;
#X obj 314 332 samplerate~;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 4 0 36 0;
#X connect 4 1 36 3;
#X connect 5 0 8 0;
#X connect 6 0 8 0;
#X connect 7 0 8 0;
#X connect 8 0 36 0;
#X connect 8 1 36 2;
#X connect 9 0 23 0;
#X connect 10 0 23 0;
#X connect 11 0 23 0;
#X connect 12 0 23 0;
#X connect 19 0 30 0;
#X connect 23 0 36 0;
#X connect 23 1 36 1;
#X connect 24 0 30 0;
#X connect 32 0 30 0;
#X connect 33 0 36 0;
#X connect 34 0 23 0;
#X connect 35 0 8 0;
#X connect 36 0 24 0;
#X connect 37 0 38 0;
#X connect 38 0 36 2;
#X restore 208 325 pd format pcm;
#N canvas 543 103 887 643 format 0;
#X msg 194 198 48000;
#X text 177 148 samplerate;
#X msg 49 493 format opus;
#X text 139 493 all arguments are optional!;
#X text 496 310 complexity (0 - 10);
#X text 497 456 signal type;
#X msg 500 503 auto;
#X msg 542 503 music;
#X msg 592 503 voice;
#X text 100 149 blocksize;
#X msg 199 225 24000;
#X text 497 333 higher values give better quality but need more CPU power. the default is 9, f 38;
#X msg 204 253 16000;
#X msg 208 281 12000;
#X msg 215 307 8000;
#X text 31 149 channels;
#X text 570 134 NOTE: this is the *total* bitrate!;
#X text 31 23 Opus codec (compressed);
#X text 31 50 Opus is a low latency codec explicitly designed for streaming audio over the internet \, see http://opus-codec.org/, f 63;
#X text 30 86 It offers good audio quality even at low data rates and does packet loss concealment to hide the effects of packet loss in unreliable networks., f 61;
#X text 264 149 application type;
#X msg 274 183 audio;
#X msg 281 219 voip;
#X msg 286 257 lowdelay;
#X msg 116 198 120;
#X msg 123 225 240;
#X msg 126 253 480;
#X msg 132 280 960;
#X msg 137 307 1920;
#X msg 52 409 format opus <nchannels> <blocksize> <samplerate> <application>, f 37;
#X text 54 544 (here we only specify the blocksize and application type), f 58;
#X text 359 250 optimize for low latency, f 13;
#X text 326 178 high fidelity (default), f 15;
#X text 327 213 optimize for VoIP applications, f 18;
#X msg 664 261 codec_get bitrate;
#X text 663 237 get current bitrate;
#X text 679 379 get current complexity;
#X msg 681 405 codec_get complexity;
#X text 659 544 get current signal type;
#X msg 499 251 codec_set bitrate \$1;
#X obj 274 317 symbol;
#X obj 36 377 pack 2 480 48000 s, f 39;
#X obj 105 344 t b a;
#X obj 183 344 t b a;
#X obj 274 346 t b a;
#X msg 501 396 codec_set complexity \$1;
#X obj 500 536 symbol;
#X msg 500 563 codec_set signal \$1;
#X obj 36 604 s \$0-msg;
#X obj 499 280 s \$0-msg;
#X obj 501 424 s \$0-msg;
#X obj 500 591 s \$0-msg;
#X msg 661 571 codec_get signal;
#X text 497 63 NOTE: you must first set the format to "opus"!;
#X text 498 113 bitrate (kbit/s);
#X msg 36 458 format opus \$1 \$2 \$3 \$4;
#X obj 332 317 loadbang;
#X msg 332 341 symbol audio;
#X text 57 522 you can skip individual arguments with "_";
#X msg 56 570 format opus _ 240 _ lowdelay;
#X text 495 35 Additional codec parameters;
#X text 496 81 parameters are reset with each [format( message!;
#X msg 516 213 symbol max;
#X msg 508 184 symbol auto;
#X text 509 157 64 kbit/s per channel is considered transparent.;
#X text 600 183 use automatic bitrate;
#X text 600 213 use maximum bitrate;
#X text 497 477 optimize for music or speech \, or use auto mode;
#X floatatom 499 135 8 0 0 0 - - - 0;
#X floatatom 501 371 5 0 0 0 - - - 0;
#X floatatom 36 174 5 0 0 0 - - - 0;
#X floatatom 105 173 6 0 0 0 - - - 0;
#X floatatom 183 173 8 0 0 0 - - - 0;
#X connect 0 0 43 0;
#X connect 2 0 48 0;
#X connect 6 0 46 0;
#X connect 7 0 46 0;
#X connect 8 0 46 0;
#X connect 10 0 43 0;
#X connect 12 0 43 0;
#X connect 13 0 43 0;
#X connect 14 0 43 0;
#X connect 21 0 40 0;
#X connect 22 0 40 0;
#X connect 23 0 40 0;
#X connect 24 0 42 0;
#X connect 25 0 42 0;
#X connect 26 0 42 0;
#X connect 27 0 42 0;
#X connect 28 0 42 0;
#X connect 34 0 49 0;
#X connect 37 0 50 0;
#X connect 39 0 49 0;
#X connect 40 0 44 0;
#X connect 41 0 55 0;
#X connect 42 0 41 0;
#X connect 42 1 41 1;
#X connect 43 0 41 0;
#X connect 43 1 41 2;
#X connect 44 0 41 0;
#X connect 44 1 41 3;
#X connect 45 0 50 0;
#X connect 46 0 47 0;
#X connect 47 0 51 0;
#X connect 52 0 51 0;
#X connect 55 0 48 0;
#X connect 56 0 57 0;
#X connect 57 0 41 3;
#X connect 59 0 48 0;
#X connect 62 0 39 0;
#X connect 63 0 39 0;
#X connect 68 0 39 0;
#X connect 69 0 45 0;
#X connect 70 0 41 0;
#X connect 71 0 42 0;
#X connect 72 0 43 0;
#X restore 313 325 pd format opus;
#X text 75 325 available codecs:;
#X text 75 299 outputs a [format( message with the validated format.;
#N canvas 555 125 684 668 sink 0;
#X msg 29 75 add localhost 9999 1;
#X msg 70 309 remove localhost 9999 1;
#X msg 86 394 list_sinks;
#X msg 79 346 remove;
#X obj 29 602 s \$0-msg;
#X msg 26 41 add <host> <port> <ID> [<active> <channel onset>];
#X msg 37 114 add localhost 9999 1 0;
#X msg 46 155 add localhost 9999 1 1 4;
#X obj 61 241 nbx 5 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10 #fcfcfc #000000 #000000 0 256;
#X msg 61 261 channel localhost 9999 1 \$1;
#X text 269 261 set sink channel onset;
#X msg 53 208 active localhost 9999 1 \$1;
#X obj 53 185 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 255 206 (de)activate sink;
#X text 232 111 by default \, sinks are initially activated \, but you can override this with the <active> argument., f 51;
#X msg 95 565 uninvite localhost 9999 1;
#X msg 91 530 invite localhost 9999 1;
#X text 234 156 with initial sink channel onset (default: 0);
#X msg 88 462 auto_invite \$1;
#X obj 88 441 tgl 15 0 empty empty empty 17 7 0 10 #fcfcfc #000000 #000000 0 1;
#X text 269 529 manually accept invitation \, see [invite( event.;
#X text 285 565 manually accept uninvitation \, see [uninvite( event.;
#X text 88 497 the following methods are only needed if 'auto_invite' is off., f 62;
#X text 204 463 automatically accept (un)invitations (default: on);
#X text 385 40 add an AOO sink;
#X text 249 308 remove an AOO sink;
#X text 132 347 remove all AOO sinks;
#X text 173 391 list all sinks. This will output a message [sink <host> <port> <id>( for each sink., f 46;
#X connect 0 0 4 0;
#X connect 1 0 4 0;
#X connect 2 0 4 0;
#X connect 3 0 4 0;
#X connect 6 0 4 0;
#X connect 7 0 4 0;
#X connect 8 0 9 0;
#X connect 9 0 4 0;
#X connect 11 0 4 0;
#X connect 12 0 11 0;
#X connect 15 0 4 0;
#X connect 16 0 4 0;
#X connect 18 0 4 0;
#X connect 19 0 18 0;
#X restore 238 216 pd sink;
#X msg 30 56 add localhost 9999 1;
#X msg 41 89 remove localhost 9999 1;
#X text 192 57 add AOO sink;
#X text 220 89 remove AOO sink;
#X obj 29 555 aoo_send~ 2 9998 1;
#X obj 181 615 aoo_send~ 2 9998 2;
#X obj 181 646 aoo_receive~ 2 9998 1;
#X text 234 487 1) number of channels (default: 1);
#X text 233 534 2) port number for incoming messages;
#X text 233 560 3) the source ID \, must be unique for all [aoo_send~];
#X text 251 580 instances on this port.;
#X text 253 509 HINT: use 0 channels for pure message streams;
#X text 225 167 HINT: you can use these two methods to send short "audio messages" instead of continuous streams., f 50;
#X text 224 125 The "start" message may also contain additional metadata:, f 30;
#X text 77 215 More about AOO sinks:;
#N canvas 543 103 674 572 format 0;
#X text 31 23 Null codec;
#X text 28 53 This is a dummy codec that does not send any audio. Use this for pure message streams., f 52;
#X msg 194 178 44100;
#X msg 201 205 48000;
#X msg 185 153 22050;
#X obj 177 266 t b f;
#X msg 113 154 64;
#X msg 122 179 128;
#X msg 129 204 256;
#X msg 136 230 512;
#X text 100 100 blocksize;
#X text 177 100 samplerate;
#X text 134 402 all arguments are optional!;
#X text 28 99 channels;
#X obj 104 267 t b f;
#X obj 30 519 s \$0-msg;
#X text 48 432 you can skip individual arguments with "_";
#X floatatom 30 128 5 0 0 0 - - - 0;
#X floatatom 104 128 5 0 0 0 - - - 0;
#X floatatom 177 127 5 0 0 0 - - - 0;
#X obj 30 300 pack 1 64 f, f 26;
#X obj 229 239 loadbang;
#X obj 229 263 samplerate~;
#X msg 42 334 [format null <nchannels> <blocksize> <samplerate>;
#X msg 30 369 format null \$1 \$2 \$3 \$4;
#X msg 40 402 format null;
#X msg 46 483 format null _ 256;
#X text 46 454 (here we only specify the blocksize, f 36;
#X text 280 98 "channels" here refers to the number of stream message channels. For example \, channels might correspond to MIDI tracks., f 45;
#X text 330 222 "samplerate" is typically kept at the default. There is no point in upsampling or downsampling., f 35;
#X text 279 165 "blocksize" is similar to other codecs \, as it essentially trades latency for bandwidth (smaller blocks = more packets)., f 44;
#X connect 2 0 5 0;
#X connect 3 0 5 0;
#X connect 4 0 5 0;
#X connect 5 0 20 0;
#X connect 5 1 20 2;
#X connect 6 0 14 0;
#X connect 7 0 14 0;
#X connect 8 0 14 0;
#X connect 9 0 14 0;
#X connect 14 0 20 0;
#X connect 14 1 20 1;
#X connect 17 0 20 0;
#X connect 18 0 14 0;
#X connect 19 0 5 0;
#X connect 20 0 24 0;
#X connect 21 0 22 0;
#X connect 22 0 20 2;
#X connect 24 0 15 0;
#X connect 25 0 15 0;
#X connect 26 0 15 0;
#X restore 426 325 pd format null;
#N canvas 292 330 640 515 message 0;
#X obj 42 447 s \$0-msg;
#X obj 175 351 fudiformat;
#X msg 175 324 bar 1 2 3;
#X obj 42 419 list prepend 0;
#X floatatom 154 420 5 0 0 0 - - - 0;
#X text 200 421 channel;
#X obj 42 360 list prepend osc;
#X obj 175 380 list prepend fudi;
#X text 39 274 OSC message;
#X text 175 295 FUDI message;
#X obj 316 392 pack f f 144, f 15;
#X obj 475 380 - 1;
#X obj 475 406 + 144;
#X floatatom 475 355 5 0 0 0 - - - 0;
#X text 313 250 MIDI notes;
#X floatatom 316 275 5 0 0 0 - - - 0;
#X text 358 276 pitch;
#X obj 316 353 makenote 100 1000;
#X text 517 354 MIDI channel;
#X floatatom 374 298 5 0 0 0 - - - 0;
#X floatatom 432 327 5 0 0 0 - - - 0;
#X text 415 299 velocity;
#X text 474 326 duration;
#X text 31 107 "channel" specifies the (audio) channel that the message is associated with., f 77;
#X msg 316 422 list 0 midi \$3 \$1 \$2;
#X obj 316 450 s \$0-msg;
#X text 33 70 They use the following format:;
#X msg 258 70 list <channel> <type> <data...>;
#X text 33 27 Stream messages are arbitrary messages that can be either sent together with audio data \, or as a pure message stream (see "null" format)., f 73;
#X text 34 133 "type" and "data" are the same as for stream metadata \, see [pd metadata]., f 74;
#X text 35 159 Stream messages are scheduled sample accurately \, based on the logical time \, similar to [vline~]., f 78;
#X text 34 201 They appear at the corresponding [aoo_sink~] object as [msg ...( messages \, dispatched at the correct time offset \, albeit with a one block delay., f 76;
#X msg 42 301 set foo \, 1 2 3;
#X obj 42 331 oscformat;
#X connect 1 0 7 0;
#X connect 2 0 1 0;
#X connect 3 0 0 0;
#X connect 4 0 3 1;
#X connect 6 0 3 0;
#X connect 7 0 3 0;
#X connect 10 0 24 0;
#X connect 11 0 12 0;
#X connect 12 0 10 2;
#X connect 13 0 11 0;
#X connect 15 0 17 0;
#X connect 17 0 10 0;
#X connect 17 1 10 1;
#X connect 19 0 17 1;
#X connect 20 0 17 2;
#X connect 24 0 25 0;
#X connect 32 0 33 0;
#X connect 33 0 6 0;
#X restore 196 365 pd message;
#X text 74 365 stream messages:;
#X text 284 365 advanced settings:;
#X text 76 394 multichannel support:;
#X text 26 19 aoo_send~: send an AOO audio stream to one or more AOO sinks;
#X text 75 428 HINT: open aoo_receive~-help.pd to hear the stream.;
#X text 75 248 set the streaming format:;
#X obj 235 394 bng 19 250 50 0 \$0-show-mc \$0-dummy empty 0 -10 0 12 #fcfcfc #000000 #000000;
#N canvas 202 455 617 407 guts 0;
#X obj 38 191 pdcontrol;
#X msg 38 163 dir;
#X obj 38 36 r \$0-show-mc;
#X obj 38 86 aoo;
#X obj 116 191 print;
#X msg 116 164 This version of Pd does not support multichannel signals;
#X obj 116 136 b;
#X msg 38 218 \; pd open mc_aoo_send~.pd \$1 1;
#X obj 38 110 route multichannel;
#X obj 38 134 sel 1;
#X msg 38 60 multichannel;
#X connect 0 0 7 0;
#X connect 1 0 0 0;
#X connect 2 0 10 0;
#X connect 3 0 8 0;
#X connect 5 0 4 0;
#X connect 6 0 5 0;
#X connect 8 0 9 0;
#X connect 9 0 1 0;
#X connect 9 1 6 0;
#X connect 10 0 3 0;
#X restore 35 687 pd guts;
#X connect 1 0 3 0;
#X connect 2 0 4 0;
#X connect 3 0 34 0;
#X connect 4 0 34 1;
#X connect 6 0 5 0;
#X connect 8 0 34 0;
#X connect 9 0 34 0;
#X connect 11 0 7 0;
#X connect 24 0 34 0;
#X connect 30 0 34 0;
#X connect 31 0 34 0;
#X connect 34 0 11 0;
