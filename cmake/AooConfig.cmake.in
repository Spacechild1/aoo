set(AOO_VERSION @PROJECT_VERSION@)
set(AOO_VERSION_STRING @PROJECT_VERSION@)
set(AOO_VERSION_MAJOR @PROJECT_VERSION_MAJOR@)
set(AOO_VERSION_MINOR @PROJECT_VERSION_MINOR@)
set(AOO_VERSION_PATCH @PROJECT_VERSION_PATCH@)

@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

if (@AOO_USE_OPUS@)
    # Find Opus before including Aoo*Targets.cmake! Otherwise, the latter
    # would fail if the project has been built with AOO_LOCAL_OPUS=ON.
    find_dependency(Opus)
endif()

set(Aoo_static_targets "${CMAKE_CURRENT_LIST_DIR}/AooStaticTargets.cmake")
set(Aoo_shared_targets "${CMAKE_CURRENT_LIST_DIR}/AooSharedTargets.cmake")

macro(Aoo_load_targets type)
    if (NOT EXISTS "${Aoo_${type}_targets}")
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "Aoo `${type}` libraries were requested but not found.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
        return()
    endif ()
    include("${Aoo_${type}_targets}")
    message(STATUS "Using ${type} AOO library")
endmacro()

if (DEFINED AOO_SHARED_LIBS)
    # AOO_SHARED_LIBS forces the shared/static library
    if (AOO_SHARED_LIBS)
        Aoo_load_targets(shared)
    else()
        Aoo_load_targets(static)
    endif()
elseif (BUILD_SHARED_LIBS)
    # BUILD_SHARED_LIBS prefers the shared library.
    if (EXISTS "${Aoo_shared_targets}")
        Aoo_load_targets(shared)
    else ()
        Aoo_load_targets(static)
    endif ()
else()
    # otherwise prefer the static library
    if (EXISTS "${Aoo_static_targets}")
        Aoo_load_targets(static)
    else()
        Aoo_load_targets(shared)
    endif()
endif()

set(AOO_LIBRARY Aoo::aoo)
set(AOO_LIBRARIES Aoo::aoo)

set(AOO_FOUND 1)
